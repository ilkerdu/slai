import { GoogleGenAI } from "@google/genai";
import { GEMINI_IMAGE_MODEL } from "../constants";

const getApiKey = (): string | undefined => {
  return import.meta.env.VITE_GEMINI_API_KEY;
};

export const generateImageFromPrompt = async (prompt: string): Promise<string> => {
  const apiKey = getApiKey();
  if (!apiKey) {
    throw new Error("API key is not configured. Please set the VITE_GEMINI_API_KEY environment variable.");
  }

  const ai = new GoogleGenAI({ apiKey });

  try {
    const response = await ai.models.generateImages({
      model: GEMINI_IMAGE_MODEL,
      prompt: prompt,
      config: { numberOfImages: 1, outputMimeType: 'image/jpeg' },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const base64ImageBytes = response.generatedImages[0].image.imageBytes;
      return `data:image/jpeg;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No image was generated by the API.");
    }
  } catch (error) {
    console.error("Error generating image with Gemini API:", error);
    if (error instanceof Error) {
        if (error.message.includes("API key not valid")) {
            throw new Error("The configured API key is invalid. Please check your VITE_GEMINI_API_KEY.");
        }
        if (error.message.includes("quota")) {
            throw new Error("API quota exceeded. Please check your Gemini API billing and limits.");
        }
        throw new Error(`Failed to generate image: ${error.message}`);
    }
    throw new Error("An unknown error occurred while generating the image.");
  }
};
